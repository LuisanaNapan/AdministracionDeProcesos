#include <iostream>
#include <fstream>
#include <string>
using namespace std;

struct Proceso {
    int id;
    string nombre;
    int prioridad;
    int memoria;
};

struct NodoLista {
    Proceso proceso;
    NodoLista* siguiente;
    NodoLista() : siguiente(NULL) {}
};

class GestorProceso {
private:
    NodoLista* cabeza;

    NodoLista* buscarNodo(int id) {
        NodoLista* actual = cabeza;
        while (actual) {
            if (actual->proceso.id == id)
                return actual;
            actual = actual->siguiente;
        }
        return NULL;
    }

public:
    GestorProceso() : cabeza(NULL) {}

    void insertarProceso(Proceso p) {
        NodoLista* nuevo = new NodoLista;
        nuevo->proceso = p;
        nuevo->siguiente = cabeza;
        cabeza = nuevo;
    }

    bool eliminarProceso(int id) {
        if (!cabeza) return false;
        if (cabeza->proceso.id == id) {
            NodoLista* temp = cabeza;
            cabeza = cabeza->siguiente;
            delete temp;
            return true;
        }
        NodoLista* actual = cabeza;
        while (actual->siguiente) {
            if (actual->siguiente->proceso.id == id) {
                NodoLista* temp = actual->siguiente;
                actual->siguiente = temp->siguiente;
                delete temp;
                return true;
            }
            actual = actual->siguiente;
        }
        return false;
    }

    Proceso* buscarProceso(int id) {
        NodoLista* nodo = buscarNodo(id);
        return nodo ? &(nodo->proceso) : NULL;
    }

    bool modificarPrioridad(int id, int nuevaPrioridad) {
        NodoLista* nodo = buscarNodo(id);
        if (nodo) {
            nodo->proceso.prioridad = nuevaPrioridad;
            return true;
        }
        return false;
    }

    void mostrarProcesos() {
        NodoLista* actual = cabeza;
        while (actual) {
            cout << "\t| ID: " << actual->proceso.id
                 << " | Nombre: " << actual->proceso.nombre
                 << " | Prioridad: " << actual->proceso.prioridad
                 << " | Memoria: " << actual->proceso.memoria << " MB\n";
            actual = actual->siguiente;
        }
    }

    void guardarArchivo(const string& nombreArchivo) {
        ofstream archivo(nombreArchivo.c_str());
        NodoLista* actual = cabeza;
        while (actual) {
            archivo << actual->proceso.id << ","
                    << actual->proceso.nombre << ","
                    << actual->proceso.prioridad << ","
                    << actual->proceso.memoria << "\n";
            actual = actual->siguiente;
        }
        archivo.close();
    }

    void cargarArchivo(const string& nombreArchivo) {
        ifstream archivo(nombreArchivo.c_str());
        string linea;
        while (getline(archivo, linea)) {
            Proceso p;
            size_t pos = 0;

            pos = linea.find(',');
            p.id = stoi(linea.substr(0, pos));
            linea.erase(0, pos + 1);

            pos = linea.find(',');
            p.nombre = linea.substr(0, pos);
            linea.erase(0, pos + 1);

            pos = linea.find(',');
            p.prioridad = stoi(linea.substr(0, pos));
            linea.erase(0, pos + 1);

            p.memoria = stoi(linea);

            insertarProceso(p);
        }
        archivo.close();
    }
};

struct NodoCola {
    Proceso proceso;
    NodoCola* siguiente;
};

NodoCola* frente = NULL;
NodoCola* final = NULL;

void encolar(NodoCola*& frente, NodoCola*& final, Proceso p) {
    NodoCola* nuevo = new NodoCola;
	nuevo->proceso = p;
	nuevo->siguiente = NULL;

    if (!final) {
        frente = final = nuevo;
    } else {
        final->siguiente = nuevo;
        final = nuevo;
    }
}

bool desencolar(NodoCola*& frente, NodoCola*& final) {
    if (!frente) return false;
    NodoCola* temp = frente;
    frente = frente->siguiente;
    if (!frente) final = NULL;
    delete temp;
    return true;
}

void mostrarCola(NodoCola* frente) {
    if (!frente) {
        cout << "\tCola vac?a.\n";
        return;
    }
    NodoCola* actual = frente;
    while (actual) {
        Proceso p = actual->proceso;
        cout << "\t| ID: " << p.id << " | Nombre: " << p.nombre
             << " | Prioridad: " << p.prioridad << " | Memoria: " << p.memoria << "MB\n";
        actual = actual->siguiente;
    }
}

void mostrarMenuPrincipal() {
    cout << "\n\t===== SISTEMA DE GESTION DE PROCESOS =====\n";
    cout << "\t[1]. Agregar proceso\n";
    cout << "\t[2]. Eliminar proceso\n";
    cout << "\t[3]. Buscar proceso por ID\n";
    cout << "\t[4]. Modificar prioridad\n";
    cout << "\t[5]. Mostrar todos los procesos\n";
    cout << "\t[6]. Guardar procesos en archivo\n";
    cout << "\t[7]. Cargar procesos desde archivo\n";
    cout << "\t[8]. Cola de procesos\n";
    cout << "\t[0]. Salir\n";
    cout << "\n\tSeleccione una opcion: ";
}

void SubMenuCola(GestorProceso& gestor) {
    setlocale(LC_CTYPE, "Spanish");
    int opColita;
    do {
        cout << "\n\t************ COLA DE PROCESOS ************\n";
        cout << "\t-------------------------------------------";
        cout << "\n\t[1]. Ingresar nuevo proceso\n";
        cout << "\t[2]. Ejecutar proceso (desencolar)\n";
        cout << "\t[3]. Ver cola de procesos\n";
        cout << "\t[4]. Volver\n";
        cout << "\t[5]. Salir\n";
        cout << "\n\tElija una opcion: ";
        cin >> opColita;
        cin.ignore();

        switch (opColita) {
            case 1: {
                Proceso p;
                cout << "\n\tIngrese ID\t    : ";
                cin >> p.id;
                cout << "\tIngrese nombre\t    : ";
                cin.ignore();
                getline(cin, p.nombre);
                cout << "\tIngrese prioridad   : ";
                cin >> p.prioridad;
                cout << "\tIngrese memoria (MB): ";
                cin >> p.memoria;

                gestor.insertarProceso(p);
                encolar(frente, final, p);
                cout << "\t-- Proceso insertado correctamente. --\n";
                break;
            }
            case 2: {
                if (frente) {
                    Proceso p = frente->proceso;
                    desencolar(frente, final);
                    gestor.eliminarProceso(p.id);
                    cout << "\tProceso con ID " << p.id << " ejecutado y eliminado.\n";
                } else {
                    cout << "\tLa cola est? vac?a.\n";
                }
                break;
            }
            case 3: {
                mostrarCola(frente);
                break;
            }
            case 4:
                cout << "\tEstas volviendo al menu principal...\n";
                break;
            case 5:
                cout << "\tSaliendo del programa...\n";
                exit(0);
            default:
                cout << "\tERROR, Ingrese una opcion v?lida del submenu.\n";
        }
    } while (opColita != 4);
}

int main() {
    GestorProceso gestor;
    int opcion;

    do {
        mostrarMenuPrincipal();
        cin >> opcion;
        cin.ignore();

        switch (opcion) {
            case 1: {
                Proceso p;
                cout << "Ingrese ID: ";
                cin >> p.id;
                cout << "Ingrese nombre: ";
                cin >> p.nombre;
                cout << "Ingrese prioridad: ";
                cin >> p.prioridad;
                cout << "Ingrese memoria (MB): ";
                cin >> p.memoria;
                gestor.insertarProceso(p);
                encolar(frente, final, p);
                cout << "Proceso insertado correctamente.\n";
                break;
            }
            case 2: {
                int id;
                cout << "Ingrese ID del proceso a eliminar: ";
                cin >> id;
                if (gestor.eliminarProceso(id))
                    cout << "Proceso eliminado correctamente.\n";
                else
                    cout << "No se encontró el proceso.\n";
                break;
            }
            case 3: {
                int id;
                cout << "Ingrese ID del proceso a buscar: ";
                cin >> id;
                Proceso* p = gestor.buscarProceso(id);
                if (p)
                    cout << "ID: " << p->id
                         << " | Nombre: " << p->nombre
                         << " | Prioridad: " << p->prioridad
                         << " | Memoria: " << p->memoria << " MB\n";
                else
                    cout << "No se encontró el proceso.\n";
                break;
            }
            case 4: {
                int id, nuevaPrioridad;
                cout << "Ingrese ID del proceso a modificar: ";
                cin >> id;
                cout << "Ingrese nueva prioridad: ";
                cin >> nuevaPrioridad;
                if (gestor.modificarPrioridad(id, nuevaPrioridad))
                    cout << "Prioridad modificada correctamente.\n";
                else
                    cout << "No se encontró el proceso.\n";
                break;
            }
            case 5: {
                gestor.mostrarProcesos();
                break;
            }
            case 6: {
                string nombreArchivo;
                cout << "Ingrese nombre del archivo para guardar: ";
                cin >> nombreArchivo;
                gestor.guardarArchivo(nombreArchivo);
                cout << "Procesos guardados correctamente.\n";
                break;
            }
            case 7: {
                string nombreArchivo;
                cout << "Ingrese nombre del archivo para cargar: ";
                cin >> nombreArchivo;
                gestor.cargarArchivo(nombreArchivo);
                cout << "Procesos cargados correctamente.\n";
                break;
            }
            case 8: {
                SubMenuCola(gestor);
		break;
	    }
            case 0: {
                cout << "Saliendo del programa...\n";
                break;
            }
            default:
                cout << "Opción no válida. Intente de nuevo.\n";
        }

    } while (opcion != 0);

    return 0;
}
