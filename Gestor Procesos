#include <iostream>
#include <fstream>
#include <string>
#include <cstdlib>
using namespace std;

#define MAX_PILA 100

struct Proceso {
    int id;
    string nombre;
    int prioridad;
    int memoria;
};

struct NodoLista {
    Proceso proceso;
    NodoLista* siguiente;
    NodoLista() {
        siguiente = NULL;
    }
};

struct NodoCola {
    Proceso proceso;
    NodoCola* siguiente;
};

int procesos[MAX_PILA];
int siguiente[MAX_PILA];
int tope = -1;
int libre = 0;
int memoriaUsada = 0;

NodoCola* frente = NULL;
NodoCola* final = NULL;

void encolar(NodoCola*& frente, NodoCola*& final, Proceso p) {
    NodoCola* nuevo = new NodoCola;
    nuevo->proceso = p;
    nuevo->siguiente = NULL;

    if (!final) {
        frente = final = nuevo;
        return;
    }
    if (p.prioridad < frente->proceso.prioridad) {
        nuevo->siguiente = frente;
        frente = nuevo;
        return;
    }
    NodoCola* actual = frente;
    NodoCola* anterior = NULL;

    while (actual && actual->proceso.prioridad <= p.prioridad) {
        if (actual->proceso.prioridad == p.prioridad) {
            while (actual->siguiente && actual->siguiente->proceso.prioridad == p.prioridad) {
                actual = actual->siguiente;
            }
            nuevo->siguiente = actual->siguiente;
            actual->siguiente = nuevo;
            if (nuevo->siguiente == NULL) {
                final = nuevo;
            }
            return;
        }
        anterior = actual;
        actual = actual->siguiente;
    }
    nuevo->siguiente = actual;
    anterior->siguiente = nuevo;
    if (nuevo->siguiente == NULL) {
        final = nuevo;
    }
}

bool desencolar(NodoCola*& frente, NodoCola*& final) {
    if (!frente) return false;
    NodoCola* temp = frente;
    frente = frente->siguiente;
    if (!frente) final = NULL;
    delete temp;
    return true;
}

void mostrarCola(NodoCola* frente) {
    if (!frente) {
        cout << "\tCola vacía.\n";
        return;
    }
    NodoCola* actual = frente;
    while (actual) {
        Proceso p = actual->proceso;
        cout << "\t| ID: " << p.id << " | Nombre: " << p.nombre
             << " | Prioridad: " << p.prioridad << " | Memoria: " << p.memoria << "MB\n";
        actual = actual->siguiente;
    }
}

bool eliminarDeColaPorId(NodoCola*& frente, NodoCola*& final, int id) {
    if (!frente) return false;
    NodoCola* actual = frente;
    NodoCola* anterior = NULL;

    while (actual) {
        if (actual->proceso.id == id) {
            if (anterior == NULL) {
                frente = actual->siguiente;
                if (!frente) final = NULL;
            } else {
                anterior->siguiente = actual->siguiente;
                if (actual == final) {
                    final = anterior;
                }
            }
            delete actual;
            return true;
        }
        anterior = actual;
        actual = actual->siguiente;
    }
    return false;
}

void inicializarPila() {
    libre = 0;
    for (int i = 0; i < MAX_PILA - 1; i++) {
        siguiente[i] = i + 1;
    }
    siguiente[MAX_PILA - 1] = -1;
    tope = -1;
    memoriaUsada = 0;
}

void asignarMemoria(NodoLista* cabeza) {
    int idBuscado;
    cout << "\tIngrese el ID del proceso al que desea asignar memoria: ";
    cin >> idBuscado;
    NodoLista* actual = cabeza;
    while (actual && actual->proceso.id != idBuscado) {
        actual = actual->siguiente;
    }
    if (!actual) {
        cout << "\tEl proceso con ID " << idBuscado << " no existe.\n";
        return;
    }
    if (libre == -1) {
        cout << "\tNo hay bloques de memoria disponibles.\n";
        return;
    }
    if (memoriaUsada + actual->proceso.memoria > MAX_PILA) {
        cout << "\tNo hay suficiente memoria disponible. Solo quedan "
             << (MAX_PILA - memoriaUsada) << " MB.\n";
        return;
    }

    int nuevoBloque = libre;
    libre = siguiente[libre];

    procesos[nuevoBloque] = actual->proceso.id;
    siguiente[nuevoBloque] = tope;
    tope = nuevoBloque;
    memoriaUsada += actual->proceso.memoria;

    cout << "\tMemoria asignada correctamente al proceso " << actual->proceso.nombre << " (ID: " << actual->proceso.id << ").\n";
}

void verTope() {
    if (tope == -1) {
        cout << "\tLa pila de memoria está vacía.\n";
        return;
    }
    cout << "\tEl bloque en el tope está asignado al proceso con ID: " << procesos[tope] << "\n";
}

void LiberarProceso(NodoLista* cabeza) {
    if (tope == -1) {
        cout << "\tError: Pila vacía\n";
        return;
    }
    int idProceso = procesos[tope];
    NodoLista* actual = cabeza;
    int memoriaProceso = 0;
    while (actual && actual->proceso.id != idProceso) {
        actual = actual->siguiente;
    }
    if (actual) {
        memoriaProceso = actual->proceso.memoria;
    }
    memoriaUsada -= memoriaProceso;
    cout << "\tLiberando bloque: " << idProceso << "\n";
    tope = siguiente[tope];
}

void VerificarVacia() {
    if (tope == -1) {
        cout << "\tVerdadero (vacía)\n";
    } else {
        cout << "\tFalso (con datos)\n";
    }
}

class GestorProceso {
private:
    NodoLista* cabeza;

    NodoLista* buscarNodo(int id) {
        NodoLista* actual = cabeza;
        while (actual) {
            if (actual->proceso.id == id)
                return actual;
            actual = actual->siguiente;
        }
        return NULL;
    }

    void liberarLista() {
        NodoLista* actual = cabeza;
        while (actual) {
            NodoLista* temp = actual;
            actual = actual->siguiente;
            delete temp;
        }
        cabeza = NULL;
    }

public:
    GestorProceso() {
        cabeza = NULL;
    }

    ~GestorProceso() {
        liberarLista();
    }

    NodoLista* getCabeza() const {
        return cabeza;
    }

    void agregarProceso() {
        Proceso p;
        do {
            cout << "\n\tIngrese ID del proceso\t\t: ";
            cin >> p.id;
            if (p.id < 100 || p.id > 999) {
                cout << "\tERROR, el ID debe ser un número de 3 dígitos (100 a 999)\n";
            }
        } while (p.id < 100 || p.id > 999);

        cout << "\tIngrese nombre del proceso\t: ";
        cin >> p.nombre;

        do {
            cout << "\tIngrese prioridad (1 a 5)\t: ";
            cin >> p.prioridad;
            if (p.prioridad < 1 || p.prioridad > 5) {
                cout << "\tERROR, ingrese una prioridad válida (entre 1 y 5)\n";
            }
        } while (p.prioridad < 1 || p.prioridad > 5);

        do {
            cout << "\tIngrese memoria (en MB)\t\t: ";
            cin >> p.memoria;
            if (p.memoria <= 0) {
                cout << "\tERROR, la memoria debe ser un número positivo.\n";
            }
        } while (p.memoria <= 0);

        NodoLista* nuevoNodo = new NodoLista();
        nuevoNodo->proceso = p;
        nuevoNodo->siguiente = NULL;

        if (cabeza == NULL) {
            cabeza = nuevoNodo;
        } else {
            NodoLista* actual = cabeza;
            while (actual->siguiente != NULL) {
                actual = actual->siguiente;
            }
            actual->siguiente = nuevoNodo;
        }

        cout << "\t-- Proceso insertado correctamente. --\n";
        encolar(frente, final, p);
    }

    bool eliminarProceso(int id) {
        if (!cabeza) return false;
        if (cabeza->proceso.id == id) {
            NodoLista* temp = cabeza;
            cabeza = cabeza->siguiente;
            delete temp;
            eliminarDeColaPorId(frente, final, id);
            return true;
        }
        NodoLista* actual = cabeza;
        while (actual->siguiente) {
            if (actual->siguiente->proceso.id == id) {
                NodoLista* temp = actual->siguiente;
                actual->siguiente = temp->siguiente;
                delete temp;
                eliminarDeColaPorId(frente, final, id);
                return true;
            }
            actual = actual->siguiente;
        }
        return false;
    }

    Proceso* buscarProceso(int id) {
        NodoLista* nodo = buscarNodo(id);
        return nodo ? &(nodo->proceso) : NULL;
    }

    bool modificarPrioridad(int id, int nuevaPrioridad) {
        NodoLista* nodo = buscarNodo(id);
        if (nodo) {
            nodo->proceso.prioridad = nuevaPrioridad;
            eliminarDeColaPorId(frente, final, id);
            encolar(frente, final, nodo->proceso);
            return true;
        }
        return false;
    }

    void mostrarProcesos() {
        if (!cabeza) {
            cout << "\tNo hay procesos para mostrar.\n";
            return;
        }
        NodoLista* actual = cabeza;
        while (actual) {
            cout << "\t| ID: " << actual->proceso.id
                 << " | Nombre: " << actual->proceso.nombre
                 << " | Prioridad: " << actual->proceso.prioridad
                 << " | Memoria: " << actual->proceso.memoria << " MB\n";
            actual = actual->siguiente;
        }
    }

    void guardarArchivo(const string& nombreArchivo) {
        if (!cabeza) {
            cout << "\tNo hay procesos para guardar. No se creó ningún archivo.\n";
            return;
        }
        ofstream archivo(nombreArchivo.c_str());
        if (!archivo) {
            cout << "\tError al abrir el archivo para guardar.\n";
            return;
        }
        NodoLista* actual = cabeza;
        while (actual) {
            archivo << actual->proceso.id << ","
                    << actual->proceso.nombre << ","
                    << actual->proceso.prioridad << ","
                    << actual->proceso.memoria << "\n";
            actual = actual->siguiente;
        }
        archivo.close();
        cout << "\tProcesos guardados correctamente.\n";
    }

    void cargarArchivo(const string& nombreArchivo) {
        ifstream archivo(nombreArchivo.c_str());
        if (!archivo) {
            cout << "\tError al abrir el archivo para cargar.\n";
            return;
        }
        liberarLista();
        string linea;
        while (getline(archivo, linea)) {
            Proceso p;
            size_t pos = 0;
            pos = linea.find(',');
            if (pos == string::npos) continue;
            p.id = atoi(linea.substr(0, pos).c_str());
            linea.erase(0, pos + 1);
            pos = linea.find(',');
            if (pos == string::npos) continue;
            p.nombre = linea.substr(0, pos);
            linea.erase(0, pos + 1);
            pos = linea.find(',');
            if (pos == string::npos) continue;
            p.prioridad = atoi(linea.substr(0, pos).c_str());
            linea.erase(0, pos + 1);
            p.memoria = atoi(linea.c_str());

            NodoLista* nuevoNodo = new NodoLista();
            nuevoNodo->proceso = p;
            nuevoNodo->siguiente = NULL;
            if (cabeza == NULL) {
                cabeza = nuevoNodo;
            } else {
                NodoLista* actual = cabeza;
                while (actual->siguiente != NULL) {
                    actual = actual->siguiente;
                }
                actual->siguiente = nuevoNodo;
            }
            encolar(frente, final, p);
        }
        archivo.close();
        cout << "\tProcesos cargados correctamente.\n";

        // Mostrar los procesos cargados
        cout << "\tProcesos cargados:\n";
        mostrarProcesos();
    }
};

void SubMenuCola(GestorProceso& gestor) {
    int opColita;
    do {
        cout << "\n\t***** COLA DE PROCESOS *****\n";
        cout << "\t[1]. Ingresar nuevo proceso\n";
        cout << "\t[2]. Ejecutar proceso (desencolar)\n";
        cout << "\t[3]. Ver cola de procesos\n";
        cout << "\t[4]. Volver\n";
        cout << "\t[5]. Salir\n";
        cout << "\n\tElija una opcion: ";
        cin >> opColita;
        cin.ignore();

        switch (opColita) {
            case 1:
                gestor.agregarProceso();
                break;
            case 2:
                if (frente) {
                    Proceso p = frente->proceso;
                    desencolar(frente, final);
                    gestor.eliminarProceso(p.id);
                    cout << "\tProceso con ID " << p.id << " ejecutado y eliminado.\n";
                } else {
                    cout << "\tLa cola está vacía.\n";
                }
                break;
            case 3:
                mostrarCola(frente);
                break;
            case 4:
                cout << "\tVolviendo al menú principal...\n";
                break;
            case 5:
                cout << "\tSaliendo del programa...\n";
                exit(0);
            default:
                cout << "\tERROR, Ingrese una opción válida del submenú.\n";
        }
    } while (opColita != 4);
}

void SubMenuPila(GestorProceso& gestor) {
    int opcion;
    do {
        cout << "\n\t***** PILA DE BLOQUES *****\n";
        cout << "\t[1]. Asignar Proceso\n";
        cout << "\t[2]. Liberar Proceso\n";
        cout << "\t[3]. Ver tope\n";
        cout << "\t[4]. Verificar Vacía\n";
        cout << "\t[5]. Volver\n";
        cout << "\n\tElija una opción: ";
        cin >> opcion;

        switch (opcion) {
            case 1:
                asignarMemoria(gestor.getCabeza());
                break;
            case 2:
                LiberarProceso(gestor.getCabeza());
                break;
            case 3:
                verTope();
                break;
            case 4:
                VerificarVacia();
                break;
            case 5:
                cout << "\tVolviendo al menú principal...\n";
                break;
            default:
                cout << "\tOpción inválida\n";
        }
    } while (opcion != 5);
}

void mostrarMenuPrincipal() {
    cout << "\n\t===== SISTEMA DE GESTIÓN DE PROCESOS =====\n";
    cout << "\t[1]. Agregar proceso\n";
    cout << "\t[2]. Eliminar proceso\n";
    cout << "\t[3]. Buscar proceso por ID\n";
    cout << "\t[4]. Modificar prioridad\n";
    cout << "\t[5]. Mostrar todos los procesos\n";
    cout << "\t[6]. Guardar procesos en archivo\n";
    cout << "\t[7]. Cargar procesos desde archivo\n";
    cout << "\t[8]. Cola de procesos\n";
    cout << "\t[9]. Pila de bloques\n";
    cout << "\t[0]. Salir\n";
    cout << "\tSeleccione una opción: ";
}

int main() {
    GestorProceso gestor;
    inicializarPila();
    int opcion;

    do {
        mostrarMenuPrincipal();
        cin >> opcion;
        cin.ignore();

        switch (opcion) {
            case 1:
                gestor.agregarProceso();
                break;
            case 2: {
                int id;
                cout << "\tIngrese ID del proceso a eliminar: ";
                cin >> id;
                cin.ignore();
                if (gestor.eliminarProceso(id))
                    cout << "\tProceso eliminado correctamente.\n";
                else
                    cout << "\tNo se encontró el proceso.\n";
                break;
            }
            case 3: {
                int id;
                cout << "\tIngrese ID del proceso a buscar: ";
                cin >> id;
                cin.ignore();
                Proceso* p = gestor.buscarProceso(id);
                if (p)
                    cout << "\t| ID: " << p->id
                         << " | Nombre: " << p->nombre
                         << " | Prioridad: " << p->prioridad
                         << " | Memoria: " << p->memoria << " MB\n";
                else
                    cout << "\tNo se encontró el proceso.\n";
                break;
            }
            case 4: {
                int id, nuevaPrioridad;
                cout << "\tIngrese ID del proceso a modificar: ";
                cin >> id;
                cout << "\tIngrese nueva prioridad: ";
                cin >> nuevaPrioridad;
                cin.ignore();
                if (gestor.modificarPrioridad(id, nuevaPrioridad))
                    cout << "\tPrioridad modificada correctamente.\n";
                else
                    cout << "\tNo se encontró el proceso.\n";
                break;
            }
            case 5:
                gestor.mostrarProcesos();
                break;
            case 6: {
                string nombreArchivo;
                cout << "\tIngrese nombre del archivo para guardar: ";
                getline(cin, nombreArchivo);
                gestor.guardarArchivo(nombreArchivo);
                break;
            }
            case 7: {
                string nombreArchivo;
                cout << "\tIngrese nombre del archivo para cargar: ";
                getline(cin, nombreArchivo);
                gestor.cargarArchivo(nombreArchivo);
                break;
            }
            case 8:
                SubMenuCola(gestor);
                break;
            case 9:
                SubMenuPila(gestor);
                break;
            case 0:
                cout << "\tSaliendo del programa...\n";
                break;
            default:
                cout << "\tOpción no válida. Intente de nuevo.\n";
        }
    } while (opcion != 0);

    return 0;
} 
