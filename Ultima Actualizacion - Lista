#include <iostream>
#include <fstream>
#include <string>
#include <cstdlib> // Para NULL
using namespace std;
//para pila 
#define MAX_PILA 100         //Tamaño máximo
int procesos[MAX_PILA];       // almacena los bloques asignados
int siguiente[MAX_PILA];     // enlaza cada posición con la anterior
int tope = -1;               // índice del tope de la pila
int libre = 0;               // índice del siguiente espacio libre

struct Proceso {
    int id;
    string nombre;
    int prioridad;
    int memoria;
};

struct NodoLista {
    Proceso proceso;
    NodoLista* siguiente;
    NodoLista() : siguiente(NULL) {}
};

//creamos una estructura llamada NodoCola
struct NodoCola {
    Proceso proceso;
    NodoCola* siguiente;
};

NodoCola* frente = NULL; //decimos que el frente de la cola
NodoCola* final = NULL; //y el final de la cola están vacios

//creamos una funcion encolar con los parametros y referencias que renombraremos dentro
void encolar(NodoCola*& frente, NodoCola*& final, Proceso p) {
    NodoCola* nuevo = new NodoCola;
	nuevo->proceso = p;
	nuevo->siguiente = NULL;

    if (!final) {
        frente = final = nuevo;
    } else {
        final->siguiente = nuevo;
        final = nuevo;
    }
}

bool desencolar(NodoCola*& frente, NodoCola*& final) {
    if (!frente) return false;
    NodoCola* temp = frente;
    frente = frente->siguiente;
    if (!frente) final = NULL;
    delete temp;
    return true;
}

void mostrarCola(NodoCola* frente) {
    if (!frente) {
        cout << "\tCola vac?a.\n";
        return;
    }
    NodoCola* actual = frente;
    while (actual) {
        Proceso p = actual->proceso;
        cout << "\t| ID: " << p.id << " | Nombre: " << p.nombre
             << " | Prioridad: " << p.prioridad << " | Memoria: " << p.memoria << "MB\n";
        actual = actual->siguiente;
    }
}

// Funciones para Pila - Dayana
void asignarProceso() {
    //Verifica si la pila ha alcanzado su capacidad máxima
    if (libre >= MAX_PILA) {
        cout << "\tError: Pila llena\n";
    } else {
        int idProceso;
        cout << "\tID del bloque: ";
        cin >> idProceso;

        procesos[libre] = idProceso;     // Guarda el ID en el arreglo de bloques
        siguiente[libre] = tope;       // Enlaza con el bloque anterior (el actual tope)
        tope = libre;                  // Actualiza el tope al nuevo bloque agregado
        libre++;                       // Avanza al siguiente espacio libre

        cout << "\tBloque " << idProceso << " asignado correctamente.\n";
    }
}

void verTope() {
    // Verifica si la pila está vacía antes de mostrar el tope
    if (tope == -1) {
        cout << "\tError: Pila vacía\n";
    } else {
        cout << "\tBloque en tope: " << procesos[tope] << "\n";
    }
}

// Funciones para Pila - Yatzuri
void LiberarProceso() {
    // Verifica si la pila está vacía antes de liberar
    if (tope == -1) {
        cout << "\tError: Pila vacía\n";
    } else {
        // Muestra el bloque que será liberado (actual tope)
        cout << "\tLiberando bloque: " << procesos[tope] << "\n";

        // Actualiza el tope al anterior bloque (retrocede en la pila)
        tope = siguiente[tope];
    }
}

void VerificarVacia() {
    // Verifica si la pila está vacía (tope == -1)
    if (tope == -1) {
        cout << "\tVerdadero (vacía)\n";
    } else {
        cout << "\tFalso (con datos)\n";
    }
}

class GestorProceso {
private:
    NodoLista* cabeza;

    NodoLista* buscarNodo(int id) {
        NodoLista* actual = cabeza;
        while (actual) {
            if (actual->proceso.id == id)
                return actual;
            actual = actual->siguiente;
        }
        return NULL;
    }

    void liberarLista() {
        NodoLista* actual = cabeza;
        while (actual) {
            NodoLista* temp = actual;
            actual = actual->siguiente;
            delete temp;
        }
        cabeza = NULL;
    }

public:
    GestorProceso() : cabeza(NULL) {}

    ~GestorProceso() {
        liberarLista();
    }
	//Función para agregar un nuevo proceso a la lista ligada 
	void agregarProceso() { //Dayana
		Proceso p;
	    //Validar que el ID sea un número de 3 dígitos entre 100 y 999
	    do {
	        cout << "\n\tIngrese ID del proceso\t\t: ";
	        cin >> p.id;
	        if (p.id < 100 || p.id > 999) {
	            cout << "\tERROR, el ID debe ser un número de 3 dígitos (100 a 999)\n";
	        }
	    } while (p.id < 100 || p.id > 999);
	
	    //Solicitar nombre del proceso
	    cout << "\tIngrese nombre del proceso\t: ";
	    cin >> p.nombre;
	
	    //Validar que la prioridad esté entre 1 y 5
	    do {
	        cout << "\tIngrese prioridad (1 a 5)\t: ";
	        cin >> p.prioridad;
	        if (p.prioridad < 1 || p.prioridad > 5) {
	            cout << "\tERROR, ingrese una prioridad válida (entre 1 y 5)\n";
	        }
	    } while (p.prioridad < 1 || p.prioridad > 5);
	
	    //Validar que la memoria sea un número positivo
	    do {
	        cout << "\tIngrese memoria (en MB)\t\t: ";
	        cin >> p.memoria;
	        if (p.memoria <= 0) {
	            cout << "\tERROR, la memoria debe ser un número positivo.\n";
	        }
	    } while (p.memoria <= 0);
	
	    //Crear un nuevo nodo para la lista ligada y asignar el proceso
	    NodoLista* nuevoNodo = new NodoLista();
	    nuevoNodo->proceso = p;
	    nuevoNodo->siguiente = NULL;
	
	    //Insertar el nodo al final de la lista
	    if (cabeza == NULL) {
	        cabeza = nuevoNodo;  //Si la lista está vacía, el nuevo nodo es la cabeza
	    } else {
	        NodoLista* actual = cabeza;
	        // Recorrer hasta el último nodo
	        while (actual->siguiente != NULL) {
	            actual = actual->siguiente;
	        }
	        actual->siguiente = nuevoNodo;  //Enlazar el nuevo nodo al final
	    }
	
	    cout << "\t-- Proceso insertado correctamente. --\n";
	    encolar(frente, final, p);
	}

    // Función para eliminar un proceso de la lista ligada por su ID
    void eliminarProceso() { //Yatzuri
        int idEliminar;

        // Solicitar al usuario el ID a eliminar (validar que tenga 3 dígitos)
        do {
            cout << "\n\tIngrese ID del proceso a eliminar (100-999): ";
            cin >> idEliminar;
            if (idEliminar < 100 || idEliminar > 999) {
                cout << "\tERROR, el ID debe ser un número de 3 dígitos (100 a 999)\n";
            }
        } while (idEliminar < 100 || idEliminar > 999);

        // Verificar si la lista está vacía
        if (cabeza == NULL) {
            cout << "\tLa lista está vacía. No hay procesos que eliminar.\n";
            return;
        }

        // Caso especial: el proceso a eliminar está en la cabeza de la lista
        if (cabeza->proceso.id == idEliminar) {
            NodoLista* temp = cabeza;
            cabeza = cabeza->siguiente; // Avanza la cabeza al siguiente nodo
            delete temp;                // Libera la memoria del nodo eliminado
            cout << "\tProceso con ID " << idEliminar << " eliminado correctamente.\n";
            return;
        }

        // Buscar el nodo a eliminar recorriendo la lista
        NodoLista* actual = cabeza;
        while (actual->siguiente != NULL && actual->siguiente->proceso.id != idEliminar) {
            actual = actual->siguiente;
        }

        // Si se encontró el nodo con el ID
        if (actual->siguiente != NULL) {
            NodoLista* temp = actual->siguiente;
            actual->siguiente = temp->siguiente; // Salta el nodo a eliminar
            delete temp;
            cout << "\tProceso con ID " << idEliminar << " eliminado correctamente.\n";
        } else {
            // No se encontró el proceso con ese ID
            cout << "\tNo se encontró ningún proceso con el ID " << idEliminar << ".\n";
        }
    }

    Proceso* buscarProceso(int id) {
        NodoLista* nodo = buscarNodo(id);
        return nodo ? &(nodo->proceso) : NULL;
    }

    bool modificarPrioridad(int id, int nuevaPrioridad) {
        NodoLista* nodo = buscarNodo(id);
        if (nodo) {
            nodo->proceso.prioridad = nuevaPrioridad;
            return true;
        }
        return false;
    }

    void mostrarProcesos() {
        if (!cabeza) {
            cout << "\tNo hay procesos para mostrar.\n";
            return;
        }
        NodoLista* actual = cabeza;
        while (actual) {
            cout << "\t| ID: " << actual->proceso.id
                 << " | Nombre: " << actual->proceso.nombre
                 << " | Prioridad: " << actual->proceso.prioridad
                 << " | Memoria: " << actual->proceso.memoria << " MB\n";
            actual = actual->siguiente;
        }
    }

    void guardarArchivo(const string& nombreArchivo) {
        ofstream archivo(nombreArchivo.c_str());
        if (!archivo) {
            cout << "Error al abrir el archivo para guardar.\n";
            return;
        }
        NodoLista* actual = cabeza;
        while (actual) {
            archivo << actual->proceso.id << ","
                    << actual->proceso.nombre << ","
                    << actual->proceso.prioridad << ","
                    << actual->proceso.memoria << "\n";
            actual = actual->siguiente;
        }
        archivo.close();
    }

    void cargarArchivo(const string& nombreArchivo) {
        ifstream archivo(nombreArchivo.c_str());
        if (!archivo) {
            cout << "\tError al abrir el archivo para cargar.\n";
            return;
        }
        liberarLista();
        string linea;
        while (getline(archivo, linea)) {
            Proceso p;
            size_t pos = 0;

            pos = linea.find(',');
            if (pos == string::npos) continue;
            p.id = atoi(linea.substr(0, pos).c_str());
            linea.erase(0, pos + 1);

            pos = linea.find(',');
            if (pos == string::npos) continue;
            p.nombre = linea.substr(0, pos);
            linea.erase(0, pos + 1);

            pos = linea.find(',');
            if (pos == string::npos) continue;
            p.prioridad = atoi(linea.substr(0, pos).c_str());
            linea.erase(0, pos + 1);

            p.memoria = atoi(linea.c_str());

            agregarProceso();
        }
        archivo.close();
    }
};

//Funcion de SubMenu cola cuando el usuario ingrese la opcion 8
void SubMenuCola(GestorProceso& gestor) {
    setlocale(LC_CTYPE, "Spanish");
    int opColita;
    do {
	//mostramos las opciones para el SubMenuCola
        cout << "\n\t************ COLA DE PROCESOS ************\n";
        cout << "\t-------------------------------------------";
        cout << "\n\t[1]. Ingresar nuevo proceso\n";
        cout << "\t[2]. Ejecutar proceso (desencolar)\n";
        cout << "\t[3]. Ver cola de procesos\n";
        cout << "\t[4]. Volver\n";
        cout << "\t[5]. Salir\n";
        cout << "\n\tElija una opcion: ";
        cin >> opColita;
        cin.ignore();

        switch (opColita) {
			case 1: {
				gestor.agregarProceso();       
			    break;
			}
            case 2: {
                if (frente) {
                    Proceso p = frente->proceso;
                    desencolar(frente, final);
                    gestor.eliminarProceso(p.id);
                    cout << "\tProceso con ID " << p.id << " ejecutado y eliminado.\n";
                } else {
                    cout << "\tLa cola esta vacia.\n";
                }
                break;
            }
            case 3: {
                mostrarCola(frente);
                break;
            }
            case 4:
                cout << "\tEstas volviendo al menu principal...\n";
                break;
            case 5:
                cout << "\tSaliendo del programa...\n";
                exit(0);
            default:
                cout << "\tERROR, Ingrese una opcion valida del submenu.\n";
        }
    } while (opColita != 4);
}

void SubMenuPila() {
    int opcion;
    do {
        cout << "\n\t************ PILA DE BLOQUES ************\n";
        cout << "\t-------------------------------------------";
        cout << "\n\t[1]. Asignar Proceso";
        cout << "\n\t[2]. Liberar Proceso";
        cout << "\n\t[3]. Ver tope";
        cout << "\n\t[4]. Verificar Vacía";
        cout << "\n\t[5]. Volver\n";
        cout << "\n\tElija una opción: "; 
        cin>>opcion;

        switch(opcion) {
            case 1: 
				asignarProceso(); 
			break;
            case 2: 
				LiberarProceso(); 
			break;
            case 3: 
				verTope(); 
			break;
            case 4: 
				VerificarVacia(); 
			break;
            case 5: cout << "\tVolviendo al menú principal...\n"; break;
            default: cout << "\tOpción inválida\n";
        }
    } while (opcion != 5);
}

void mostrarMenuPrincipal() {
    cout << "\n\t===== SISTEMA DE GESTION DE PROCESOS =====\n";
    cout << "\t[1]. Agregar proceso\n";
    cout << "\t[2]. Eliminar proceso\n";
    cout << "\t[3]. Buscar proceso por ID\n";
    cout << "\t[4]. Modificar prioridad\n";
    cout << "\t[5]. Mostrar todos los procesos\n";
    cout << "\t[6]. Guardar procesos en archivo\n";
    cout << "\t[7]. Cargar procesos desde archivo\n";
    cout << "\t[8]. Cola de procesos\n"; //agregamos la opción 8 en el menú principal para que sea visible por el usuario.
    cout << "\t[9]. Pila de bloques\n"; // opcion para pila (Dayana y Yatzuri)
    cout << "\t[0]. Salir\n";
    cout << "\tSeleccione una opción: ";
}

int main() {
    GestorProceso gestor;
    int opcion;

    do {
        mostrarMenuPrincipal();
        cin >> opcion;
        cin.ignore();

        switch (opcion) {
		    case 1: {
                gestor.agregarProceso();
                break;
			break;
		    }
            case 2: {
                int id;
                cout << "\tIngrese ID del proceso a eliminar: ";
                cin >> id;
                cin.ignore();
                if (gestor.eliminarProceso(id))
                    cout << "\tProceso eliminado correctamente.\n";
                else
                    cout << "\tNo se encontró el proceso.\n";
                break;
            }
            case 3: {
                int id;
                cout << "\tIngrese ID del proceso a buscar: ";
                cin >> id;
                cin.ignore();
                Proceso* p = gestor.buscarProceso(id);
                if (p)
                    cout << "\t| ID: " << p->id
                         << " | Nombre: " << p->nombre
                         << " | Prioridad: " << p->prioridad
                         << " | Memoria: " << p->memoria << " MB\n";
                else
                    cout << "\tNo se encontró el proceso.\n";
                break;
            }
            case 4: {
                int id, nuevaPrioridad;
                cout << "\tIngrese ID del proceso a modificar: ";
                cin >> id;
                cout << "\tIngrese nueva prioridad: ";
                cin >> nuevaPrioridad;
                cin.ignore();
                if (gestor.modificarPrioridad(id, nuevaPrioridad))
                    cout << "\tPrioridad modificada correctamente.\n";
                else
                    cout << "\tNo se encontró el proceso.\n";
                break;
            }
            case 5:
                gestor.mostrarProcesos();
                break;
            case 6: {
                string nombreArchivo;
                cout << "\tIngrese nombre del archivo para guardar: ";
                cin.ignore(); // Agregado por seguridad
                getline(cin, nombreArchivo);
                gestor.guardarArchivo(nombreArchivo);
                cout << "\tProcesos guardados correctamente.\n";
                break;
            }
            case 7: {
                string nombreArchivo;
                cout << "\tIngrese nombre del archivo para cargar: ";
                cin.ignore(); // Agregado por seguridad
                getline(cin, nombreArchivo);
                gestor.cargarArchivo(nombreArchivo);
                cout << "\tProcesos cargados correctamente.\n";
                break;
            }
            case 8: {
                SubMenuCola(gestor); //llamamos a la funcion de submenuCola cuando el usuario ingrese la opción 8 del menú principal
			break;
            }
            case 9: {
                SubMenuPila(); 
			break;
            }
            case 0:
                cout << "\tSaliendo del programa...\n";
                break;
            default:
                cout << "\tOpción no válida. Intente de nuevo.\n";
        }
    } while (opcion != 0);
    return 0;
}
